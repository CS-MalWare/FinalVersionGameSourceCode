@startuml

title __CONTROLSTATE's Class Diagram__\n

  namespace gamesource {
    namespace State {
      namespace controlState {
        class gamesource.State.controlState.InputAppState {
            {static} + BACKWARD : String
            {static} + BACKWARD_TRIGGER : Trigger
            {static} + DEBUG : String
            {static} + DEBUG_TRIGGER : Trigger
            {static} + FORWARD : String
            {static} + FORWARD_TRIGGER : Trigger
            {static} + JUMP : String
            {static} + JUMP_TRIGGER : Trigger
            {static} + LEFT : String
            {static} + LEFT_TRIGGER : Trigger
            {static} + RIGHT : String
            {static} + RIGHT_TRIGGER : Trigger
            - backward : boolean
            - forward : boolean
            - inputManager : InputManager
            - left : boolean
            - right : boolean
            - stateManager : AppStateManager
            + idle()
            + onAction()
            # cleanup()
            # initialize()
            # onDisable()
            # onEnable()
            - jump()
            - toggleBulletDebug()
            - walk()
        }
      }
    }
  }
  

  namespace gamesource {
    namespace State {
      namespace controlState {
        class gamesource.State.controlState.PositionInputState {
            {static} + FIRE : String
            - cam : Camera
            - inputManager : InputManager
            - stateManager : AppStateManager
            # cleanup()
            # initialize()
            # onDisable()
            # onEnable()
        }
      }
    }
  }
  

  namespace gamesource {
    namespace State {
      namespace controlState {
        class gamesource.State.controlState.PositionInputState.MyActionListener {
            + onAction()
        }
      }
    }
  }
  

  namespace gamesource {
    namespace State {
      namespace controlState {
        class gamesource.State.controlState.getCamState {
            {static} + get : String
            - cam : Camera
            - inputManager : InputManager
            - stateManager : AppStateManager
            # cleanup()
            # initialize()
            # onDisable()
            # onEnable()
        }
      }
    }
  }
  

  namespace gamesource {
    namespace State {
      namespace controlState {
        class gamesource.State.controlState.getCamState.MyActionListener {
            + onAction()
        }
      }
    }
  }
  

  gamesource.State.controlState.InputAppState .up.|> com.jme3.input.controls.ActionListener
  gamesource.State.controlState.InputAppState -up-|> com.jme3.app.state.BaseAppState
  gamesource.State.controlState.PositionInputState -up-|> com.jme3.app.state.BaseAppState
  gamesource.State.controlState.PositionInputState +-down- gamesource.State.controlState.PositionInputState.MyActionListener
  gamesource.State.controlState.PositionInputState.MyActionListener .up.|> com.jme3.input.controls.ActionListener
  gamesource.State.controlState.getCamState -up-|> com.jme3.app.state.BaseAppState
  gamesource.State.controlState.getCamState +-down- gamesource.State.controlState.getCamState.MyActionListener
  gamesource.State.controlState.getCamState.MyActionListener .up.|> com.jme3.input.controls.ActionListener




@enduml
